[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_ft = ['c', 'cpp', 'go', 'sh', 'vim', 'rust', 'typescript', 'haskell']
hook_source = '''
lua << EOF
  local opts = {noremap=true, silent=true}
  vim.api.nvim_set_keymap('n', '<C-h>', '<Cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
  vim.api.nvim_set_keymap('n', '<C-l>', '<Cmd>lua vim.diagnostic.goto_next()<CR>', opts)

  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  local on_attach = function(client, bufnr)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'ge', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<Space>r', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  end

  local servers = {'clangd', 'gopls', 'bashls', 'vimls', 'rust_analyzer', 'denols', 'hls'}
  for _, lsp in pairs(servers) do
    require('lspconfig')[lsp].setup {
      on_attach = on_attach,
      capabilities = capabilities,
    }
  end
EOF
  command! LspFormat lua vim.lsp.buf.format {async = true}<CR>
'''
