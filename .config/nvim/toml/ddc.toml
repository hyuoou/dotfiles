[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim', 'lexima.vim']
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
  call ddc#custom#patch_global({
    \ 'backspaceCompletion': v:true,
    \ 'ui': 'pum',
    \ })

  call ddc#custom#patch_global(
    \ 'sources', ['nvim-lsp', 'vsnip', 'tabnine', 'buffer', 'tmux', 'around', 'file']
    \ )

  call ddc#custom#patch_global(
    \ 'autoCompleteEvents', ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineEnter', 'CmdlineChanged']
    \ )

  call ddc#custom#patch_global('filterParams', {
    \ 'splitMode': 'word'
    \ })

  call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \   'ignoreCase': v:true,
    \   'matchers': ['matcher_fuzzy'],
    \   'sorters': ['sorter_fuzzy'],
    \   'converters': ['converter_remove_overlap', 'converter_fuzzy']
    \ },
    \ 'vsnip': {
    \   'mark': '[vsnip]',
    \   'dup': 'keep',
    \ },
    \ 'nvim-lsp': {
    \   'mark': '[LSP]',
    \   'dup': 'keep',
    \   'isVolatile': v:true,
    \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \ },
    \ 'skkeleton': {
    \   'mark': '[skkeleton]',
    \   'matchers': ['skkeleton'],
    \   'sorters': [],
    \   'isVolatile': v:true,
    \ },
    \ 'around': {
    \   'mark': '[around]',
    \   'isVolatile': v:true,
    \   'minAutoCompleteLength': 3,
    \ },
    \ 'file': {
    \   'mark': '[file]',
    \   'isVolatile': v:true,
    \   'forceCompletionPattern': '\S/\S*',
    \ },
    \ 'tabnine': {
    \   'mark': '[tabnine]',
    \   'maxItems': 5,
    \   'isVolatile': v:true,
    \ },
    \ 'mocword': {
    \   'mark': '[mocword]',
    \   'isVolatile': v:true,
    \   'minAutoCompleteLength': 3,
    \ },
    \ 'buffer': {
    \   'mark': '[buffer]',
    \   'maxItems': 5,
    \   'minAutoCompleteLength': 3,
    \ },
    \ 'tmux': {
    \   'mark': '[tmux]',
    \   'maxItems': 5,
    \   'minAutoCompleteLength': 3,
    \ },
    \ 'cmdline': {
    \   'mark': '[cmdline]',
    \   'forceCompletionPattern': '\S/\S*',
    \   'dup': 'force',
    \ },
    \ 'cmdline-history': {
    \   'mark': '[history]',
    \ },
    \ })

  call ddc#custom#patch_global('sourceParams', {
    \ 'buffer': {
    \   'requireSameFiletype': v:false,
    \   'limitBytes': 5000000,
    \   'fromAltBuf': v:true,
    \   'forceCollect': v:true,
    \ },
    \ 'tmux': {
    \   'executable': '/usr/bin/tmux'
    \ },
    \ })

  call ddc#custom#patch_filetype(['NeogitCommitMessage', 'gitcommit', 'markdown'], {
    \ 'sources': ['mocword', 'around', 'file'],
    \ })

  call ddc#enable()

  autocmd MyAutoCmd User skkeleton-enable-pre call s:skkeleton_pre()
  function! s:skkeleton_pre() abort
    let s:prev_buffer_config = ddc#custom#get_buffer()
    call ddc#custom#patch_buffer('sources', ['skkeleton'])
  endfunction

  autocmd MyAutoCmd User skkeleton-disable-pre call s:skkeleton_post()
  function! s:skkeleton_post() abort
    call ddc#custom#set_buffer(s:prev_buffer_config)
  endfunction

  nnoremap : <Cmd>call CommandlinePre()<CR>:
  function! CommandlinePre() abort
    set laststatus=0
    cnoremap <expr> <Tab>   pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<Tab>'
    cnoremap <expr> <S-Tab> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<S-Tab>'
    cnoremap <C-n> <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <C-p> <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-y> <Cmd>call pum#map#confirm()<CR>
    cnoremap <C-e> <Cmd>call pum#map#cancel()<CR>

    if !exists('b:prev_buffer_config')
      let b:prev_buffer_config = ddc#custom#get_buffer()
    endif
    call ddc#custom#patch_buffer('cmdlineSources', ['cmdline', 'cmdline-history', 'around', 'file'])

    autocmd MyAutoCmd User DDCCmdlineLeave ++once call CommandlinePost()
    autocmd MyAutoCmd InsertEnter <buffer> ++once call CommandlinePost()

    call ddc#enable_cmdline_completion()
  endfunction

  function! CommandlinePost() abort
    silent! cunmap <Tab>
    silent! cunmap <S-Tab>
    silent! cunmap <C-n>
    silent! cunmap <C-p>
    silent! cunmap <C-y>
    silent! cunmap <C-e>

    if exists('b:prev_buffer_config')
      call ddc#custom#set_buffer(b:prev_buffer_config)
      unlet b:prev_buffer_config
    else
      call ddc#custom#set_buffer({})
    endif
    set laststatus=3
  endfunction

  inoremap <silent><expr> <C-n> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<C-n>'
  inoremap <silent><expr> <C-p> pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<C-p>'
  inoremap <silent><expr> <CR>  pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' : lexima#expand('<LT>CR>', 'i')
  imap     <silent><expr> <Esc> pum#visible() ? '<Cmd>call pum#map#cancel()<CR>'  : '<Plug>(lexima-escape)'
'''

# ddc UI
[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  " call pum#set_option('border', 'single')
  call pum#set_option('scrollbar_char', '')
'''

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

# ddc filters
[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# ddc sources
[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-mocword'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'delphinus/ddc-tmux'
on_source = 'ddc.vim'

# show completion doc
[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
  call popup_preview#enable()
  inoremap <buffer><expr> <C-d> popup_preview#scroll(+4)
  inoremap <buffer><expr> <C-u> popup_preview#scroll(-4)
'''

# snippet
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
hook_add = '''
  let g:vsnip_snippet_dir = '$HOME/.config/nvim/vsnip'
  imap <expr> <Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
  smap <expr> <Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
  imap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
  smap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'
hook_source = '''
  autocmd MyAutoCmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
'''

# autopairs
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
  let g:lexima_map_escape = '<Plug>(lexima-escape)'
  let g:lexima_no_default_rules = v:true
'''
hook_source = '''
  call lexima#set_default_rules()
  " markdown
  call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'markdown'})
  call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'markdown'})
  call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'markdown'})
  " tex
  call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'tex'})
  call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'tex'})
  call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'tex'})
'''

