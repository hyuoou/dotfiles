[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'akinsho/toggleterm.nvim'
on_cmd = ['*ToggleTerm', 'TermExec']
hook_add = '''
  nnoremap <silent> <C-p> <Cmd>1ToggleTerm size=25 direction=horizontal<CR>
  nnoremap <silent> <C-f> <Cmd>1ToggleTerm direction=float<CR>

  command! -nargs=? Vt call s:open_term(<f-args>)
  function! s:open_term(...) abort
    if a:0 >= 1
      execute a:1 .. 'ToggleTerm size=80 direction=vertical'
    else
      1ToggleTerm size=80 direction=vertical
    end
  endfunction
'''
lua_source = '''
  require("toggleterm").setup({
    size = 25,
    highlights = {
      FloatBorder = {
        guifg = "#2ac3de",
      },
    }
  })
'''
[plugins.ftplugin]
toggleterm = '''
  tnoremap <buffer><silent> <C-p> <Cmd>ToggleTerm<CR>
  nnoremap <buffer><silent> <C-p> <Cmd>ToggleTerm<CR>
  nnoremap <buffer><silent> <Esc> <Cmd>ToggleTerm<CR>
'''

[[plugins]]
repo = 'kylechui/nvim-surround'
on_map = {n = 'cs', v = 'S'}
lua_source = '''
  require('nvim-surround').setup()
'''

[[plugins]]
repo = 'numToStr/Comment.nvim'
on_map = {n = 'gcc', v = 'gc'}
lua_source = '''
  require('Comment').setup()
'''

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_cmd = ['ColorizerToggle']

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_if = '&expandtab'
lua_source = '''
  require('ibl').setup({
    indent = { char = "â”‚" },
    scope = { enabled = false },
  })
'''

[[plugins]]
repo = 'famiu/bufdelete.nvim'
on_cmd = ['Bd', "Bdelete"]

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_source = ['nvim-scrollbar']
lua_source = '''
  require('gitsigns').setup()
'''

[[plugins]]
repo = 'TimUntersberger/neogit'
depends = ['plenary.nvim', 'diffview.nvim', 'nvim-web-devicons']
on_cmd = ['Neogit']
lua_source = '''
  require('neogit').setup {
    integrations = {
      diffview = true,
    },
  }
'''

[[plugins]]
repo = 'sindrets/diffview.nvim'
on_cmd = ['DiffviewOpen']
lua_source = '''
  local actions = require('diffview.actions')
  require('diffview').setup({
    keymaps = {
      file_panel = {
        { "n", "j", actions.select_next_entry, { desc = "Open the diff for the next file" } },
        { "n", "k", actions.select_prev_entry, { desc = "Open the diff for the previous file" } },
      },
    },
  })
'''

[[plugins]]
repo = 'delphinus/skkeleton_indicator.nvim'
on_source = 'skkeleton'
lua_source = '''
  vim.api.nvim_exec([[
    hi SkkeletonIndicatorEiji guifg=#000000 guibg=#24283b gui=bold
    hi SkkeletonIndicatorHira guifg=#000000 guibg=#7aa2f7 gui=bold
    hi SkkeletonIndicatorKata guifg=#000000 guibg=#f7768e gui=bold
    hi SkkeletonIndicatorHankata guifg=#000000 guibg=#bb9af7 gui=bold
    hi SkkeletonIndicatorZenkaku guifg=#000000 guibg=#89ddff gui=bold
  ]], false)
  require('skkeleton_indicator').setup({
    alwaysShown = false,
    fadeOutMs = 1000,
  })
'''

[[plugins]]
repo = 'petertriho/nvim-scrollbar'
on_event = ['CursorHold']
lua_source = '''
  local colors = require('tokyonight.colors').setup()
  require('scrollbar').setup({
    handle = {
      color = colors.bg_highlight,
    },
    marks = {
      Cursor = { text = "-" },
      Search = { color = colors.orange },
      Error = { color = colors.error },
      Warn = { color = colors.warning },
      Info = { color = colors.info },
      Hint = { color = colors.hint },
      Misc = { color = colors.purple },
    },
    excluded_filetypes = {
      "prompt",
      "TelescopePrompt",
      "noice",
      "ddu-ff-filter",
      "fern",
      "cmp_menu",
      "cmp_docs",
    },
  })
  require('scrollbar.handlers.search').setup()
  require('scrollbar.handlers.gitsigns').setup()
'''

[[plugins]]
repo = 'kevinhwang91/nvim-hlslens'
on_source = ['nvim-scrollbar']

[[plugins]]
repo = 'Bekaboo/dropbar.nvim'
depends = ['nvim-web-devicons']
on_source = ['nvim-lspconfig', 'nvim-treesitter']

[[plugins]]
repo = 'stevearc/dressing.nvim'
on_event = ['CursorHold']
lua_source = '''
  require('dressing').setup()
'''

[[plugins]]
repo = 'stevearc/conform.nvim'
on_event = 'VimEnter'
lua_source = '''
  require('conform').setup({
    formatters_by_ft = {
      c = { "clang_format" },
      cpp = { "clang_format" },
      dart = { "dart_format" },
      go = { "goimports" },
      python = { "black" },
      rust = { "rustfmt" },
      sh = { "shfmt" },
      tsx = { "prettier" },
      typescript = { "prettier" },
      lua = { "stylua" },
    }
  })

  local augroup = vim.api.nvim_create_augroup("Format", {})
  vim.api.nvim_create_autocmd("BufWritePre", {
    pattern = "*",
    group = augroup,
    callback = function (args)
      require("conform").format({ bufnr = args.buf })
    end,
  })
'''
