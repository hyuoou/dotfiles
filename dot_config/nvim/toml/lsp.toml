[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['mason.nvim', 'mason-lspconfig.nvim']
on_event = ['BufRead', 'BufNewFile']
lua_source = '''
  local opts = { noremap=true, silent=true }
  vim.keymap.set('n', '<C-h>', vim.diagnostic.goto_prev, opts)
  vim.keymap.set('n', '<C-l>', vim.diagnostic.goto_next, opts)

  local status = pcall(require, "cmp_nvim_lsp")
  local capabilities = status and require("cmp_nvim_lsp").default_capabilities()
    or vim.lsp.protocol.make_client_capabilities()

  -- ddc.vim
  if not status then
    capabilities.textDocument.completion.completionItem.snippetSupport = true
  end

  -- null-ls
  capabilities.offsetEncoding = { "utf-16" }

  local on_attach = function(_, bufnr)
    local bufopts = { noremap=true, silent=true, buffer=bufnr }
    vim.keymap.set('n', 'ge', vim.lsp.buf.definition, bufopts)
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
    vim.keymap.set('n', '<Space>r', vim.lsp.buf.rename, bufopts)
  end

  require('lspconfig.ui.windows').default_options.border = 'single'

  require('mason').setup({
    ui = {
      border = 'single',
      icons = {
        package_installed = "✓",
        package_pending = "➜",
        package_uninstalled = "✗",
      }
    }
  })
  require('mason-lspconfig').setup({
    ensure_installed = { 'bashls', 'clangd', 'gopls', 'rust_analyzer', 'vimls' }
  })
  require('mason-lspconfig').setup_handlers({
    function(server_name)
      local node_root_dir = require('lspconfig').util.root_pattern("package.json")
      local is_node_repo = node_root_dir(vim.api.nvim_buf_get_name(0)) ~= nil

      if server_name == "tsserver" or server_name == "eslint" then
        if not is_node_repo then
          return
        end
      elseif server_name == "denols" then
        if is_node_repo then
          return
        end
      end

      require('lspconfig')[server_name].setup {
        on_attach = on_attach,
        capabilities = capabilities,
        settings = {
          Lua = {
            completion = {
              callSnippet = "Replace"
            }
          }
        }
      }
    end,
  })
'''

[[plugins]]
repo = 'williamboman/mason.nvim'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'

[[plugins]]
repo = 'ErichDonGubler/lsp_lines.nvim'
on_event = 'LspAttach'
lua_source = '''
  vim.api.nvim_create_user_command(
    'LspLinesToggle',
    'lua require("lsp_lines").toggle({ desc = "Toggle lsp_lines" })',
    {},
  )
  require('lsp_lines').setup()
  vim.diagnostic.config({
    virtual_text = false,
  })
'''

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
depends = ['plenary.nvim']
on_event = 'LspAttach'
lua_source = '''
  local null_ls = require('null-ls')
  local sources = {
    -- formatter
    null_ls.builtins.formatting.black,
    null_ls.builtins.formatting.clang_format,
    null_ls.builtins.formatting.goimports,
    null_ls.builtins.formatting.prettier,
    null_ls.builtins.formatting.stylua,
    null_ls.builtins.formatting.rustfmt,
    null_ls.builtins.formatting.shfmt,
  }
  local augroup = vim.api.nvim_create_augroup("LspFormatting", {})

  require("null-ls").setup({
    sources = sources,
    on_attach = function(client, bufnr)
      if client.supports_method("textDocument/formatting") then
        vim.api.nvim_clear_autocmds({ group = augroup, buffer = bufnr })
        vim.api.nvim_create_autocmd("BufWritePre", {
          group = augroup,
          buffer = bufnr,
          callback = function()
            vim.lsp.buf.format({ bufnr = bufnr, timeout_ms = 2000 })
          end,
        })
      end
    end,
  })
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_event = 'LspAttach'
rev = 'legacy'
lua_source = '''
  require('fidget').setup()
'''

[[plugins]]
repo = 'folke/neodev.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
  require('neodev').setup()
'''
