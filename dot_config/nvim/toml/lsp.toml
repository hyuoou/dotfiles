[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['mason.nvim', 'mason-lspconfig.nvim']
on_event = ['BufRead', 'BufNewFile']
on_cmd = ['Mason']
lua_source = '''
  local opts = { noremap = true, silent = true }
  vim.keymap.set('n', '<C-h>', vim.diagnostic.goto_prev, opts)
  vim.keymap.set('n', '<C-l>', vim.diagnostic.goto_next, opts)

  local status = pcall(require, "cmp_nvim_lsp")
  local capabilities = status and require("cmp_nvim_lsp").default_capabilities()
    or require("ddc_nvim_lsp").make_client_capabilities()

  vim.api.nvim_create_autocmd('LspAttach', {
    group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    callback = function(ev)
      local bufnr = ev.buf
      local bufopts = { silent = true, buffer = bufnr }

      vim.keymap.set('n', 'ge', vim.lsp.buf.definition, bufopts)
      vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
      vim.keymap.set('n', '<Space>r', vim.lsp.buf.rename, bufopts)

      -- vim.lsp.inlay_hint(bufnr, true)
      vim.api.nvim_create_user_command(
        'InlayhintToggle',
        function()
          vim.lsp.inlay_hint(bufnr)
        end,
        {}
      )
    end,
  })
  vim.api.nvim_set_hl(0, "LspInlayHint", { fg = "#565f89", bg = "#1a1b26" })

  require('lspconfig.ui.windows').default_options.border = 'single'
  require('mason').setup({
    ui = {
      border = 'single',
      icons = {
        package_installed = "✓",
        package_pending = "➜",
        package_uninstalled = "✗",
      }
    }
  })
  require('mason-lspconfig').setup({
    ensure_installed = { 'bashls', 'clangd', 'gopls', 'rust_analyzer', 'vimls' }
  })
  require('mason-lspconfig').setup_handlers({
    function(server_name)
      local node_root_dir = require('lspconfig').util.root_pattern("package.json")
      local is_node_repo = node_root_dir(vim.api.nvim_buf_get_name(0)) ~= nil

      if server_name == "tsserver" or server_name == "eslint" then
        if not is_node_repo then
          return
        end
      elseif server_name == "denols" then
        if is_node_repo then
          return
        end
      end

      require('lspconfig')[server_name].setup {
        capabilities = capabilities,
        settings = {
          Lua = {
            completion = {
              callSnippet = "Replace"
            },
            hint = {
              enable = true
            }
          }
        }
      }
    end,
  })
'''

[[plugins]]
repo = 'williamboman/mason.nvim'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'

[[plugins]]
repo = 'ErichDonGubler/lsp_lines.nvim'
on_event = 'LspAttach'
lua_source = '''
  vim.api.nvim_create_user_command(
    'LspLinesToggle',
    'lua require("lsp_lines").toggle({ desc = "Toggle lsp_lines" })',
    {}
  )
  require('lsp_lines').setup()
  vim.diagnostic.config({
    virtual_text = false,
  })
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_event = 'LspAttach'
rev = 'legacy'
lua_source = '''
  require('fidget').setup()
'''

[[plugins]]
repo = 'folke/neodev.nvim'
on_source = 'nvim-lspconfig'
on_ft = 'lua'
lua_source = '''
  require("neodev").setup()
'''

[[plugins]]
repo = 'ray-x/go.nvim'
depends = ['guihua.lua', 'nvim-lspconfig', 'nvim-treesitter']
on_ft = ['go', 'gomod']
lua_source = '''
  require('go').setup()
'''
hook_post_update = 'lua require("go.install").update_all_sync()'

[[plugins]]
repo = 'ray-x/guihua.lua'

[[plugins]]
repo = 'akinsho/flutter-tools.nvim'
depends = ['plenary.nvim', 'telescope.nvim']
on_ft = ['dart']
lua_source = '''
  require('telescope').load_extension("flutter")
  require('flutter-tools').setup({
    widget_guides = {
      enabled = true
    },
    dev_log = {
      open_cmd = "tabnew"
    }
  })
'''

[[plugins]]
repo = 'mfussenegger/nvim-jdtls'
on_ft = ['java']
lua_source = '''
  local config = {
    cmd = {"/usr/bin/jdtls"},
    root_dir = vim.fs.dirname(vim.fs.find({'gradlew', '.git', 'mvnw'}, { upward = true })[1]),
  }
  require('jdtls').start_or_attach(config)
'''
